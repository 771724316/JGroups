
Changing the key exchange in ASYM_ENCRYPT from pull to push model
=================================================================

Author: Bela Ban
Date:   Jan 2019


Problem
=======

ASYM_ENCRYPT has a shared group key (SGK) which is used by all group members to encrypt / decrypt messages.

The SGK is created by the coordinator and transferred to new members when they join. Also, if members leave and
change_key_on_leave is true (default), then the shared key needs to be changed by the coordinator and also be
installed in all members.

The transfer of the SGK from the coordinator to members is called _key exchange_. This can be done in 2 ways:

1. The coordinator encrypts the SGK with the public key of a member, which decrypts it with its private key.
   However, this is prone to man-in-the-middle attacks.
2. Via an SSL connection between member and coordinator. This is currently done via an additional protocol
   (e.g. SSL_KEY_EXCHANGE).

In both cases, a *pull mechanism* is used: the client notices (or is told) that the SGK is no longer valid, and *pulls*
it from the coordinator. Until the new SGK is installed, all messages will be discarded.

This can lead to problems, e.g. in the following scenario:
* Coordinator A installs a new view V=A,B,C,D (E left)
* V is encrypted with the new SGK that the coordinator just created
* Members B, C and D now fetch the new SGK from the coordinator
* V is received by B, C and D: those members who have the new SGK will be able to decrypt and deliver V, the others
  will discard it.
==> Unless the coordinator sends a new multicast message, V will not get delivered by some members (until STABLE kicks
    in and retransmits V), leading to a plethora of issues.


Solution
========

Instead of using a *pull* approach for key exchange, a *push* approach should be used: the transfer of the SGK needs to
be initiated by the *coordinator* rather than the joiners (on JOIN) or other members (on VIEW / MERGE-VIEW).

Ideally, the SGK is sent *with* the JOIN-RSP or VIEW message, and installed by the recipients _before_ the new view is
decrypted. This eliminates the delays in view installation associated with the pull approach. It may also simplify the
code.

The design below describes both external (SSL_KEY_EXCHANGE) and internal (SGK encrypted by recipient's public key)
approaches to key exchange.




Design
======
- View is V1={A,B,C,D}; A is the coordinator
- use_external_key_exchange: EX
- pub-map: map of addresses and their associated public keys


1: New member E joining the group
=================================

E sends a JOIN-REQ to A
-----------------------
- If EX == false:
    - ASYM_ENCRYPT adds a header with E's public key to the JOIN-REQ sent to A

A receives the JOIN-REQ from E
------------------------------
- If the header contains the public key of E:
    - Add E and its public key to pub-map
    - Multicast a PUB-KEY message


A sends the JOIN-RSP to E
-------------------------
- If EX == false:
    - ASYM_ENCRYPT gets E's public key from pub-map, encrypts the SGK with it, and adds the
      encrypted SGK to the JOIN-RSP
- Else
    - ASYM_ENCRYPT sends a GET-SHARED-KEY message (before the JOIN-RSP) to E


E receives the GET-SHARED-KEY message from A
--------------------------------------------
- E asks its KEY_EXCHANGE protocol to fetch the SGK
- E *blocks* until the SGK has been retrieved and installed. This prevents the delivery of the JOIN-RSP,
  as the latter was sent after the GET-SHARED-KEY message. This means that the JOIN-RSP will have a valid
  SGK in place to decrypt it.


E receives the JOIN-RSP from A
------------------------------
- If EX == false:
    - Get the encrypted SGK from the JOIN-RSP
    - Install the SGK
    - Pass the JOIN-RSP up (this will install the view)
- Else:
    - The SGK has already been installed as part of the prior key exchange run


On reception of PUB-KEY:
------------------------
- Add the mapping between member and public key to pub-map


On view change
--------------
- Remove all mappings from pub-map whose members are not in the view


On a merge-view:
----------------
- TBD: multicast all mappings in pub-map?




2: Member D leaves the group and change_key_on_leave enabled
============================================================

***************************************************************************
*** Note that if change_key_on_leave is false, nothing needs to be done ***
***************************************************************************


A multicasts view V2={A,B,C}
----------------------------
- If EX:
    - ASYM_ENCRYPT multicasts a GET-SHARED-KEY message to all members (minus itself)
- Else
    - ASYM_ENCRYPT creates a map of members (B and C), grabs their public keys from pub-map, and adds the SGK
      encrypted with the respective member's public key.
    - An INSTALL-SECRET-KEY message with the above map as payload is multicast to all members (B and C)
- The VIEW message is multicast to B and C


B and C receive the GET-SHARED-KEY message from A
-------------------------------------------------
- Both members ask its KEY_EXCHANGE protocol to fetch the SGK
- This *blocks* until the SGK has been retrieved and installed. This prevents the delivery of the succeeding VIEW message,
  as the latter was sent after the GET-SHARED-KEY message. This means that the VIEW message will have a valid
  SGK in place to decrypt it.


B and C receive an INSTALL-SECRET-KEY message from A
----------------------------------------------------
- Each member reads the map from the payload and gets the encrypted SGK associated with itself from the map
- The encrypted SGK is then decrypted with the member's private key, and the resulting SGK is installed


Members B and C receive V2
--------------------------
- Nothing needs to be done, as the SGK for the new view has already been installed



3. Cluster merge
================
- Clusters are V5={A,B,C} and V5={D,E,F}


New coord D multicasts MergeView V6={D,E,C,B,A,F}
-------------------------------------------------
- If EX:
    - ASYM_ENCRYPT on D multicasts a GET-SHARED-KEY message to all members (minus itself) [same as for regular views]
- Else
    - D multicasts a SEND-PUB-KEY message to all members
    - Wait until we have the public keys of all members of V6
    - Create a map of all members, grab their public keys from pub-map, and add the SGK encrypted with the respective
      member's public key.
    - An INSTALL-SECRET-KEY message with the above map as payload is multicast to all members of V6
- The MERGE-VIEW message is multicast to all members


On reception of a SEND-PUB-KEY message from D
---------------------------------------------
- Send a PUB-KEY message (including the member's public key) back to D




